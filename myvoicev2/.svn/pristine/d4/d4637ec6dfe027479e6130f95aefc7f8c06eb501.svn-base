<?php
namespace App\Model\Table;

use Cake\ORM\Query;
use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * Users Model
 *
 * @method \App\Model\Entity\User get($primaryKey, $options = [])
 * @method \App\Model\Entity\User newEntity($data = null, array $options = [])
 * @method \App\Model\Entity\User[] newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\User|bool save(\Cake\Datasource\EntityInterface $entity, $options = [])
 * @method \App\Model\Entity\User|bool saveOrFail(\Cake\Datasource\EntityInterface $entity, $options = [])
 * @method \App\Model\Entity\User patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method \App\Model\Entity\User[] patchEntities($entities, array $data, array $options = [])
 * @method \App\Model\Entity\User findOrCreate($search, callable $callback = null, $options = [])
 */
class UsersTable extends Table
{

    /**
     * Initialize method
     *
     * @param array $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config)
    {
        parent::initialize($config);

        $this->setTable('users');
        $this->setDisplayField('id');
        $this->setPrimaryKey('id');
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator)
    {
        $validator
            ->allowEmpty('id', 'create');

        $validator
            ->scalar('empid')
            ->maxLength('empid', 255)
            ->allowEmpty('empid');

        $validator
            ->boolean('confirmed')
            ->allowEmpty('confirmed');

         $validator
            ->requirePresence('username', 'create')
            ->notEmpty('username','Please Enter User Name' );

        $validator
            ->scalar('password')
            ->maxLength('password', 255)
            ->allowEmpty('password');

        $validator
             ->requirePresence('email', 'create')
             ->notEmpty('email','Please Enter Email')
			 ->add('email', 
             ['unique' => [
            'rule' => 'validateUnique', 
            'provider' => 'table', 
            'message' => 'Your Email id already registered']
        ]
    );
			 
        $validator
            ->scalar('bu')
            ->maxLength('bu', 255)
            ->allowEmpty('bu');

        $validator
            ->scalar('department')
            ->maxLength('department', 255)
            ->allowEmpty('department');

			
			
			 $validator
            ->requirePresence('city', 'create')
            ->notEmpty('city','Please Enter city' );
        
            $validator
              ->requirePresence('work_location', 'create')
              ->notEmpty('work_location','Please Enter Work Location' );
 
      

        $validator
            ->scalar('policy_agreed')
            ->maxLength('policy_agreed', 1)
            ->allowEmpty('policy_agreed');

        $validator
            ->allowEmpty('first_access');

        $validator
            ->allowEmpty('last_access');

        $validator
            ->scalar('lastip')
            ->maxLength('lastip', 45)
            ->allowEmpty('lastip');

        $validator
            ->boolean('status')
            ->allowEmpty('status');

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules)
    {
        $rules->add($rules->isUnique(['username']));
        $rules->add($rules->isUnique(['email']));

        return $rules;
    }
}
